- result: "backend skeleton"
  prompt: |
    Initialize a new Laravel 12 project in the `KidCurious-backend` directory configured for PHP 8.3. Use Supabase PostgreSQL as the database: set environment variables for DB connection (host, port, database, user and password) according to Supabase. Configure Supabase Auth integration so that the backend trusts JWT tokens issued by Supabase. Implement a domain‑driven structure by creating an empty `packages` folder with subfolders `auth-service`, `question-service`, `moderation-service`, `llm-gateway` and `media-service`. Add dependencies such as `openai-php/client`, `predis/predis`, `laravel/octane`, `pestphp/pest`, `laravel/pint`, `laravel/websockets` and any libraries needed for Supabase JWT validation. Also include a development `Dockerfile.dev` for running the backend locally via Octane. Use `https://api.kidcurious.click` as the intended API URL.
- result: "working authentication"
  prompt: |
    In the `auth-service` module, implement registration, login and logout endpoints that delegate user management to Supabase Auth. Generate controllers and routes that accept email and password, call Supabase’s REST API to create or authenticate users, and return the Supabase access token. Add middleware to verify JWT tokens on protected routes, and write Pest tests to ensure that protected routes reject unauthorized requests. Ensure environment variables for the Supabase URL and service key are loaded from `.env`.
- result: "question service with moderation and LLM integration"
  prompt: |
    In the `question-service` module, define `Question` and `Answer` models with fields for question text, answer text and references to the user. Create a controller with a `POST /questions` endpoint that accepts a question from an authenticated user, stores it in the database, and forwards it to the `llm-gateway` module. In the `llm-gateway`, use the OpenAI client to request an answer. Pass the result through the `moderation-service` to filter out unsafe or inappropriate content (you can start with a simple profanity filter and extend later). Save the moderated answer in the database and return it to the caller. Write Pest tests verifying that a question yields an answer and that moderation triggers on bad words.
- result: "real‑time communication"
  prompt: |
    Configure Laravel WebSockets to enable real‑time updates. Create a WebSocket channel (e.g., `chat` namespace) where clients can subscribe to receive answers as soon as they are generated. Modify the question submission flow so that when an answer is ready, it is broadcast via the WebSocket channel to the specific user. Ensure that authentication is enforced on WebSocket connections using Supabase JWT tokens. Add a fallback long‑polling mechanism for clients that cannot use WebSockets.
- result: "frontend skeleton with Supabase auth"
  prompt: |
    Initialize a React application in the `KidCurious-front` directory using Vite with TypeScript and Tailwind CSS. Set up Supabase JS and configure it with the project’s Supabase URL and public anon key. Create a basic routing structure with pages for Login, Register and Chat. Implement a context (`AuthContext`) that stores the current user and provides functions to sign up, sign in and sign out using Supabase Auth. Ensure that after login, the user’s JWT token is stored and available for API requests.
- result: "chat interface connected to backend"
  prompt: |
    Create a `ChatWindow` component that displays a conversation history and an input box. Use Axios to send POST requests to `https://api.kidcurious.click/api/questions` with the user’s question and authorization token. Establish a WebSocket connection to receive answers in real time. When a message is received, update the conversation history. Style the chat UI with Tailwind CSS to be kid‑friendly: large fonts, bright colors and clear buttons. Ensure error handling for network failures and unauthorized responses.
- result: "deployment and configuration"
  prompt: |
    Update `docker-compose.yml` to point to `KidCurious-backend` and `KidCurious-front` directories. Add a `Dockerfile` in the frontend directory to build the React app and serve it via Nginx. Update the backend’s `fly.toml` environment variables to reflect the production domains (`APP_URL=https://api.kidcurious.click`, `FRONTEND_URL=https://kidcurious.click`). Provide a `README` section explaining how to deploy the app on Fly.io, set Supabase environment variables, and ensure that CORS settings allow `https://kidcurious.click`.
